"use strict";(()=>{var e={};e.id=44,e.ids=[44],e.modules={1081:e=>{e.exports=require("dotenv/config")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7612:e=>{e.exports=import("drizzle-orm")},1749:e=>{e.exports=import("drizzle-orm/node-postgres")},8358:e=>{e.exports=import("drizzle-orm/pg-core")},8678:e=>{e.exports=import("pg")},791:(e,t,r)=>{r.a(e,async(e,o)=>{try{r.r(t),r.d(t,{config:()=>l,default:()=>u,routeModule:()=>c});var n=r(1802),s=r(7153),a=r(6249),i=r(2884),d=e([i]);i=(d.then?(await d)():d)[0];let u=(0,a.l)(i,"default"),l=(0,a.l)(i,"config"),c=new n.PagesAPIRouteModule({definition:{kind:s.x.PAGES_API,page:"/api/people/[id]",pathname:"/api/people/[id]",bundlePath:"",filename:""},userland:i});o()}catch(e){o(e)}})},2884:(e,t,r)=>{r.a(e,async(e,o)=>{try{r.r(t),r.d(t,{default:()=>handler});var n=r(7612),s=r(4379),a=r(6340),i=e([n,s,a]);async function handler(e,t){let r=s.db;if(!r){console.error("Database connection is not configured"),t.status(500).json({error:"Database connection is not configured"});return}let{id:o}=e.query,i=Array.isArray(o)?o[0]:o;if(!i){t.status(400).json({message:"Person id is required"});return}if("GET"===e.method){try{let e=await r.select().from(a.M).where((0,n.eq)(a.M.personId,i));if(0===e.length){t.status(404).json({message:"Person not found"});return}t.status(200).json(e[0])}catch(r){console.error(`Failed to fetch person with id ${i}`,r);let e=r instanceof Error?r.message:"Unknown error";t.status(500).json({error:e})}return}if("PUT"===e.method||"PATCH"===e.method){try{let o=e.body||{},s={};if(void 0!==o.fullName&&(s.fullName=o.fullName),void 0!==o.status&&(s.status=o.status),void 0!==o.contactInfo&&(s.contactInfo=o.contactInfo),void 0!==o.groupId&&(s.groupId=o.groupId),void 0!==o.imgUrl&&(s.imgUrl=o.imgUrl),void 0!==o.note&&(s.note=o.note),s.updatedAt=new Date,0===Object.keys(s).length){t.status(400).json({error:"No valid fields to update"});return}let d=await r.update(a.M).set(s).where((0,n.eq)(a.M.personId,i)).returning();if(0===d.length){t.status(404).json({message:"Person not found"});return}t.status(200).json(d[0])}catch(r){console.error(`Failed to update person with id ${i}`,r);let e=r instanceof Error?r.message:"Unknown error";t.status(500).json({error:e})}return}if("DELETE"===e.method){try{let e=await r.delete(a.M).where((0,n.eq)(a.M.personId,i)).returning();if(0===e.length){t.status(404).json({message:"Person not found"});return}t.status(200).json(e[0])}catch(r){console.error(`Failed to delete person with id ${i}`,r);let e=r instanceof Error?r.message:"Unknown error";t.status(500).json({error:e})}return}t.setHeader("Allow",["GET","PUT","PATCH","DELETE"]),t.status(405).json({error:"Method not allowed"})}[n,s,a]=i.then?(await i)():i,o()}catch(e){o(e)}})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),r=t.X(0,[4222,4379,6340],()=>__webpack_exec__(791));module.exports=r})();