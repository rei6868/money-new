"use strict";(()=>{var t={};t.id=5446,t.ids=[5446],t.modules={1081:t=>{t.exports=require("dotenv/config")},145:t=>{t.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7612:t=>{t.exports=import("drizzle-orm")},1749:t=>{t.exports=import("drizzle-orm/node-postgres")},8358:t=>{t.exports=import("drizzle-orm/pg-core")},8678:t=>{t.exports=import("pg")},5110:(t,e,a)=>{a.a(t,async(t,n)=>{try{a.r(e),a.d(e,{config:()=>l,default:()=>c,routeModule:()=>d});var o=a(1802),r=a(7153),s=a(6249),u=a(3129),i=t([u]);u=(i.then?(await i)():i)[0];let c=(0,s.l)(u,"default"),l=(0,s.l)(u,"config"),d=new o.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/accounts/[id]",pathname:"/api/accounts/[id]",bundlePath:"",filename:""},userland:u});n()}catch(t){n(t)}})},3129:(t,e,a)=>{a.a(t,async(t,n)=>{try{a.r(e),a.d(e,{default:()=>handler});var o=a(7612),r=a(4379),s=a(3685),u=t([o,r,s]);async function handler(t,e){let a=r.db;if(!a){console.error("Database connection is not configured"),e.status(500).json({error:"Database connection is not configured"});return}let{id:n}=t.query,u=Array.isArray(n)?n[0]:n;if(!u){e.status(400).json({message:"Account id is required"});return}if("GET"===t.method){try{let t=await a.select({accountId:s.MI.accountId,accountName:s.MI.accountName,accountType:s.MI.accountType,openingBalance:s.MI.openingBalance,currentBalance:s.MI.currentBalance,totalIn:s.MI.totalIn,totalOut:s.MI.totalOut,status:s.MI.status,notes:s.MI.notes,parentAccountId:s.MI.parentAccountId,imgUrl:s.MI.imgUrl,assetRef:s.MI.assetRef}).from(s.MI).where((0,o.eq)(s.MI.accountId,u));if(0===t.length){e.status(404).json({message:"Account not found"});return}let[n]=t;e.status(200).json({...n,openingBalance:Number(n.openingBalance??0),currentBalance:Number(n.currentBalance??0),totalIn:Number(n.totalIn??0),totalOut:Number(n.totalOut??0)})}catch(a){console.error(`Failed to fetch account with id ${u}`,a);let t=a instanceof Error?a.message:"Unknown error";e.status(500).json({error:t})}return}if("PUT"===t.method||"PATCH"===t.method){try{let n=t.body||{},r={};if(void 0!==n.accountName&&(r.accountName=n.accountName),void 0!==n.imgUrl&&(r.imgUrl=n.imgUrl),void 0!==n.parentAccountId&&(r.parentAccountId=n.parentAccountId),void 0!==n.assetRef&&(r.assetRef=n.assetRef),void 0!==n.notes&&(r.notes=n.notes),void 0!==n.accountType){let t=s.bz.enumValues;if(!t.includes(n.accountType)){e.status(400).json({error:"Validation failed",details:`accountType must be one of: ${t.join(", ")}`});return}r.accountType=n.accountType}if(void 0!==n.status){let t=s.h9.enumValues;if(!t.includes(n.status)){e.status(400).json({error:"Validation failed",details:`status must be one of: ${t.join(", ")}`});return}r.status=n.status}if(void 0!==n.openingBalance){let t=parseFloat(n.openingBalance);if(isNaN(t)){e.status(400).json({error:"openingBalance must be a valid number"});return}r.openingBalance=t.toFixed(2)}if(void 0!==n.currentBalance){let t=parseFloat(n.currentBalance);if(isNaN(t)){e.status(400).json({error:"currentBalance must be a valid number"});return}r.currentBalance=t.toFixed(2)}if(void 0!==n.totalIn){let t=parseFloat(n.totalIn);if(isNaN(t)){e.status(400).json({error:"totalIn must be a valid number"});return}r.totalIn=t.toFixed(2)}if(void 0!==n.totalOut){let t=parseFloat(n.totalOut);if(isNaN(t)){e.status(400).json({error:"totalOut must be a valid number"});return}r.totalOut=t.toFixed(2)}r.updatedAt=new Date;let i=Object.keys(r).filter(t=>"updatedAt"!==t);if(0===i.length){e.status(400).json({error:"No valid fields to update"});return}let c=await a.update(s.MI).set(r).where((0,o.eq)(s.MI.accountId,u)).returning();if(0===c.length){e.status(404).json({message:"Account not found"});return}e.status(200).json(c[0])}catch(a){console.error(`Failed to update account with id ${u}`,a);let t=a instanceof Error?a.message:"Unknown error";e.status(500).json({error:t})}return}if("DELETE"===t.method){try{let t=await a.delete(s.MI).where((0,o.eq)(s.MI.accountId,u)).returning();if(0===t.length){e.status(404).json({message:"Account not found"});return}e.status(200).json(t[0])}catch(a){console.error(`Failed to delete account with id ${u}`,a);let t=a instanceof Error?a.message:"Unknown error";e.status(500).json({error:t})}return}e.setHeader("Allow",["GET","PUT","PATCH","DELETE"]),e.status(405).json({error:"Method not allowed"})}[o,r,s]=u.then?(await u)():u,n()}catch(t){n(t)}})}};var e=require("../../../webpack-api-runtime.js");e.C(t);var __webpack_exec__=t=>e(e.s=t),a=e.X(0,[4222,4379,6340,3902],()=>__webpack_exec__(5110));module.exports=a})();