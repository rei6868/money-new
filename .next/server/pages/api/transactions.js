"use strict";(()=>{var e={};e.id=1254,e.ids=[1254],e.modules={1081:e=>{e.exports=require("dotenv/config")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7612:e=>{e.exports=import("drizzle-orm")},1749:e=>{e.exports=import("drizzle-orm/node-postgres")},8358:e=>{e.exports=import("drizzle-orm/pg-core")},8678:e=>{e.exports=import("pg")},6113:e=>{e.exports=require("crypto")},2254:e=>{e.exports=require("node:buffer")},8846:e=>{e.exports=require("node:perf_hooks")},4414:(e,t,n)=>{n.a(e,async(e,r)=>{try{n.r(t),n.d(t,{config:()=>d,default:()=>c,routeModule:()=>u});var a=n(1802),o=n(7153),s=n(6249),i=n(7837),l=e([i]);i=(l.then?(await l)():l)[0];let c=(0,s.l)(i,"default"),d=(0,s.l)(i,"config"),u=new a.PagesAPIRouteModule({definition:{kind:o.x.PAGES_API,page:"/api/transactions",pathname:"/api/transactions",bundlePath:"",filename:""},userland:i});r()}catch(e){r(e)}})},7837:(e,t,n)=>{n.a(e,async(e,r)=>{try{n.r(t),n.d(t,{default:()=>handler});var a=n(6113),o=n(5462),s=n(4379),i=n(7492),l=n(7798),c=n(9815),d=n(7612),u=e([o,s,i,l,c,d]);[o,s,i,l,c,d]=u.then?(await u)():u;let p=[{transactionId:"mock-txn-1",transactionType:"expense",amount:15e4,transactionDate:new Date().toISOString(),accountId:"mock-acc-1",accountName:"Vietcombank Savings",categoryId:"mock-cat-1",categoryName:"Groceries",personId:"mock-person-1",personName:"John Doe",shopId:null,shopName:null,notes:"Weekly groceries",status:"completed",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()},{transactionId:"mock-txn-2",transactionType:"income",amount:5e6,transactionDate:new Date().toISOString(),accountId:"mock-acc-1",accountName:"Vietcombank Savings",categoryId:"mock-cat-2",categoryName:"Salary",personId:"mock-person-1",personName:"John Doe",shopId:null,shopName:null,notes:"Monthly salary",status:"completed",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}];async function handler(e,t){let n=s.db;if(!n){if(console.warn("Database connection is not configured - using mock data"),"GET"===e.method){let n=Number(e.query.page)||1,r=Number(e.query.pageSize)||50,a=(n-1)*r,o=a+r,s=p.slice(a,o);t.status(200).json({transactions:s,totalCount:p.length,page:n,pageSize:r,totalPages:Math.ceil(p.length/r)});return}if("POST"===e.method){let n=e.body||{},r={transactionId:`mock-txn-${Date.now()}`,transactionType:n.transactionType||"expense",amount:Number(n.amount||0),transactionDate:n.transactionDate||new Date().toISOString(),accountId:n.accountId||"mock-acc-1",accountName:"Vietcombank Savings",categoryId:n.categoryId||null,categoryName:null,personId:n.personId||"mock-person-1",personName:"John Doe",shopId:n.shopId||null,shopName:null,notes:n.notes||null,status:n.status||"completed",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};p.unshift(r),t.status(201).json(r);return}t.status(405).json({error:"Method not allowed"});return}if("GET"===e.method)try{let parseNumericParam=e=>{if(Array.isArray(e))return parseNumericParam(e[0]);if("string"==typeof e&&""!==e.trim()){let t=Number.parseInt(e,10);if(Number.isFinite(t)&&t>0)return t}},parseSortDirection=e=>Array.isArray(e)?parseSortDirection(e[0]):"asc"===e||"desc"===e?e:void 0,normalizeString=e=>{if(Array.isArray(e))return normalizeString(e[0]);if("string"==typeof e){let t=e.trim();return""===t?void 0:t}},n={},r=normalizeString(e.query.search);r&&(n.searchTerm=r);let a=parseNumericParam(e.query.page),s=parseNumericParam(e.query.pageSize);(a||s)&&(n.pagination={},a&&(n.pagination.page=a),s&&(n.pagination.pageSize=s));let i=normalizeString(e.query.sortBy),l=parseSortDirection(e.query.sortDir);(i||l)&&(n.sort={},i&&(n.sort.columnId=i),l&&(n.sort.direction=l));let c=normalizeString(e.query.restore),d=await (0,o.y)(n,c);return t.status(200).json(d)}catch(n){console.error("Failed to fetch transactions",n);let e=n instanceof Error?n.message:"Unknown error";return t.status(500).json({error:e})}if("POST"===e.method){try{let r=e.body||{},o=["occurredOn","amount","type","status","accountId"].filter(e=>void 0===r[e]||null===r[e]);if(o.length>0)return t.status(400).json({error:"Missing fields",details:o});let s=i.bn.enumValues;if(!s.includes(r.type))return t.status(400).json({error:`type must be one of: ${s.join(", ")}`});let u=i.tV.enumValues;if(!u.includes(r.status))return t.status(400).json({error:`status must be one of: ${u.join(", ")}`});let p=parseFloat(r.amount),m=r.fee?parseFloat(r.fee):0;if(isNaN(p))return t.status(400).json({error:"amount must be a valid number"});let g=(0,a.randomUUID)(),y={transactionId:g,occurredOn:new Date(r.occurredOn),amount:p.toFixed(2),fee:m.toFixed(2),type:r.type,status:r.status,accountId:r.accountId,personId:r.personId||null,categoryId:r.categoryId||null,shopId:r.shopId||null,linkedTxnId:r.linkedTxnId||null,subscriptionMemberId:r.subscriptionMemberId||null,notes:r.notes||null},[I]=await n.insert(i.dx).values(y).returning();if(r.personId&&r.debtMovement){let e;let{movementType:o,cycleTag:s}=r.debtMovement,i=l.Rk.enumValues;if(!i.includes(o))return t.status(400).json({error:"Invalid movementType",details:i});let[u]=await n.select().from(c.D).where((0,d.and)((0,d.eq)(c.D.personId,r.personId),s?(0,d.eq)(c.D.cycleTag,s):(0,d.isNull)(c.D.cycleTag))),m="open",y=0,I=0,b=0,D=0,f=0;if(u)e=u.debtLedgerId,D=parseFloat(u.initialDebt??"0"),y=parseFloat(u.newDebt??"0"),I=parseFloat(u.repayments??"0"),f=parseFloat(u.debtDiscount??"0"),"borrow"===o&&(y+=p),"repay"===o&&(I+=p),"discount"===o&&(f+=p),b=D+y-I-f,await n.update(c.D).set({newDebt:y.toFixed(2),repayments:I.toFixed(2),debtDiscount:f.toFixed(2),netDebt:b.toFixed(2),lastUpdated:new Date,status:m,notes:r.notes||u.notes||null}).where((0,d.eq)(c.D.debtLedgerId,e));else{e=(0,a.randomUUID)(),"borrow"===o&&(y=p),"repay"===o&&(I=p),b=y-I;let t={debtLedgerId:e,personId:r.personId,cycleTag:s||null,initialDebt:"0",newDebt:y.toFixed(2),repayments:I.toFixed(2),debtDiscount:"0",netDebt:b.toFixed(2),status:m,lastUpdated:new Date,notes:r.notes||null};await n.insert(c.D).values(t)}let h={debtMovementId:(0,a.randomUUID)(),transactionId:g,personId:r.personId,accountId:r.accountId,movementType:o,amount:p.toFixed(2),cycleTag:s||null,status:"active",notes:r.notes||null,createdAt:new Date,updatedAt:new Date};await n.insert(l.iJ).values(h)}t.status(201).json(I)}catch(n){console.error("Failed to create transaction",n);let e=n instanceof Error?n.message:"Unknown error";t.status(500).json({error:e})}return}t.setHeader("Allow",["GET","POST"]),t.status(405).json({error:"Method not allowed"})}r()}catch(e){r(e)}})},9815:(e,t,n)=>{n.a(e,async(e,r)=>{try{n.d(t,{D:()=>l});var a=n(8358),o=n(6340),s=e([a,o]);[a,o]=s.then?(await s)():s;let i=(0,a.pgEnum)("debt_ledger_status",["open","partial","repaid","overdue"]),l=(0,a.pgTable)("debt_ledger",{debtLedgerId:(0,a.varchar)("debt_ledger_id",{length:36}).primaryKey(),personId:(0,a.varchar)("person_id",{length:36}).notNull().references(()=>o.M.personId,{onDelete:"restrict"}),cycleTag:(0,a.varchar)("cycle_tag",{length:10}),initialDebt:(0,a.numeric)("initial_debt",{precision:18,scale:2}).notNull().default("0"),newDebt:(0,a.numeric)("new_debt",{precision:18,scale:2}).notNull().default("0"),repayments:(0,a.numeric)("repayments",{precision:18,scale:2}).notNull().default("0"),debtDiscount:(0,a.numeric)("debt_discount",{precision:18,scale:2}).default("0"),netDebt:(0,a.numeric)("net_debt",{precision:18,scale:2}).notNull().default("0"),status:i("status").notNull(),lastUpdated:(0,a.timestamp)("last_updated",{withTimezone:!0}).defaultNow().notNull(),notes:(0,a.text)("notes")},e=>({personCycleIdx:(0,a.uniqueIndex)("debt_ledger_person_cycle_uidx").on(e.personId,e.cycleTag)}));r()}catch(e){r(e)}})}};var t=require("../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),n=t.X(0,[4222,4379,6340,3902,6986,6391,7492,7056,1637,8968,5462],()=>__webpack_exec__(4414));module.exports=n})();