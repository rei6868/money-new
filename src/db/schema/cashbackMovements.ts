import {
  index,
  numeric,
  pgEnum,
  pgTable,
  text,
  timestamp,
  varchar,
} from "drizzle-orm/pg-core";

import { accounts } from "./accounts";
import { transactions } from "./transactions";

/**
 * Enumerates how a cashback value should be interpreted.
 * - "percent" means the cashbackValue stores a decimal percentage (1.5 = 1.5%).
 * - "fixed" means cashbackValue is a currency amount in the account's unit.
 */
export const cashbackTypeEnum = pgEnum("cashback_type", ["percent", "fixed"]);

/**
 * Tracks the lifecycle of a cashback movement as it progresses through
 * validation, posting and potential overrides.
 */
export const cashbackStatusEnum = pgEnum("cashback_status", [
  "init",
  "applied",
  "exceed_cap",
  "invalidated",
]);

/**
 * Normalised record of every cashback event generated by qualifying
 * transactions. The table is intentionally verbose to capture the calculation
 * context, audit metadata and budget validations required by the finance
 * platform.
 */
export const cashbackMovements = pgTable(
  "cashback_movements",
  {
    /**
     * Primary key for the cashback movement. Stored as a string to support
     * UUIDs or integration identifiers.
     */
    cashbackMovementId: varchar("cashback_movement_id", { length: 36 }).primaryKey(),

    /**
     * References the originating transaction that triggered the cashback.
     * Required so downstream logic can fetch transaction amount, merchant or
     * category metadata when re-evaluating rules.
     */
    transactionId: varchar("transaction_id", { length: 36 })
      .notNull()
      .references(() => transactions.transactionId, { onDelete: "restrict" }),

    /**
     * Links the movement to the account receiving the cashback. This mirrors
     * transaction.accountId to avoid additional joins when summarising by
     * account-cycle.
     */
    accountId: varchar("account_id", { length: 36 })
      .notNull()
      .references(() => accounts.accountId, { onDelete: "restrict" }),

    /**
     * Calculation cycle tag in YYYY-MM format. Used to aggregate cashback for
     * budgeting rules. Business logic ensures the value aligns with the
     * referenced transaction period.
     */
    cycleTag: varchar("cycle_tag", { length: 10 }).notNull(),

    /**
     * Flag describing how cashbackValue should be interpreted (percent vs fixed
     * amount). Drives UI hints and validation checks.
     */
    cashbackType: cashbackTypeEnum("cashback_type").notNull(),

    /**
     * Stores the raw rule input. Percentages are stored as decimals (e.g. 1.5 =
     * 1.5%) while fixed amounts use integer or decimal currency values.
     * Application validation must ensure the value is positive and compatible
     * with the selected cashbackType.
     */
    cashbackValue: numeric("cashback_value", { precision: 18, scale: 4 }).notNull(),

    /**
     * Final monetary amount credited after applying the rule and budget caps.
     * Always stored with currency precision.
     */
    cashbackAmount: numeric("cashback_amount", { precision: 18, scale: 2 }).notNull(),

    /**
     * Lifecycle status of the movement. "exceed_cap" is emitted when the rule
     * passes but budgetCap prevents full payout.
     */
    status: cashbackStatusEnum("status").notNull(),

    /**
     * Optional snapshot of the budget cap for the account-cycle when the
     * movement was created. Used for audits and to highlight when the cap was
     * evaluated during UI review.
     */
    budgetCap: numeric("budget_cap", { precision: 18, scale: 2 }),

    /**
     * Free-form note for validation comments, override reasons or manual audit
     * hints shown in reviewer tools.
     */
    note: text("note"),

    /**
     * Record creation timestamp.
     */
    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),

    /**
     * Timestamp of last update. Application logic should bump this when the
     * status or computed amounts change.
     */
    updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
  },
  (table) => ({
    /**
     * Index optimised for retrieving cashback movements grouped by account and
     * cycle (used by the CashbackLedger rollup jobs and budget enforcement).
     */
    accountCycleIdx: index("cashback_movements_account_cycle_idx").on(
      table.accountId,
      table.cycleTag,
    ),
  }),
);

export type CashbackMovement = typeof cashbackMovements.$inferSelect;
export type NewCashbackMovement = typeof cashbackMovements.$inferInsert;
